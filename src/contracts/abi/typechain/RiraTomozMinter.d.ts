/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RiraTomozMinterInterface extends ethers.utils.Interface {
  functions: {
    "feeTo()": FunctionFragment;
    "removeWhitelist2(address[])": FunctionFragment;
    "setLimit(uint256)": FunctionFragment;
    "whitelist2(address)": FunctionFragment;
    "nft()": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "removeWhitelist1(address[])": FunctionFragment;
    "maxCount()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "setMaxCount(uint256)": FunctionFragment;
    "limit()": FunctionFragment;
    "step()": FunctionFragment;
    "addWhitelist2(address[])": FunctionFragment;
    "addWhitelist1(address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setMintPrice(uint256)": FunctionFragment;
    "setStep(uint256)": FunctionFragment;
    "whitelist1(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelist2",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "whitelist2", values: [string]): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelist1",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "maxCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setMaxCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "limit", values?: undefined): string;
  encodeFunctionData(functionFragment: "step", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addWhitelist2",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelist1",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "whitelist1", values: [string]): string;

  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelist2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelist1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelist2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelist1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist1", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class RiraTomozMinter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RiraTomozMinterInterface;

  functions: {
    feeTo(overrides?: CallOverrides): Promise<[string]>;

    "feeTo()"(overrides?: CallOverrides): Promise<[string]>;

    removeWhitelist2(
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeWhitelist2(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLimit(
      _limit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLimit(uint256)"(
      _limit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whitelist2(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "whitelist2(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    "nft()"(overrides?: CallOverrides): Promise<[string]>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mintPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    removeWhitelist1(
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeWhitelist1(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maxCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setMaxCount(
      _maxCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxCount(uint256)"(
      _maxCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    limit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "limit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    step(overrides?: CallOverrides): Promise<[BigNumber]>;

    "step()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addWhitelist2(
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addWhitelist2(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addWhitelist1(
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addWhitelist1(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMintPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMintPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whitelist1(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "whitelist1(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  feeTo(overrides?: CallOverrides): Promise<string>;

  "feeTo()"(overrides?: CallOverrides): Promise<string>;

  removeWhitelist2(
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeWhitelist2(address[])"(
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLimit(
    _limit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLimit(uint256)"(
    _limit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whitelist2(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whitelist2(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nft(overrides?: CallOverrides): Promise<string>;

  "nft()"(overrides?: CallOverrides): Promise<string>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "mintPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  removeWhitelist1(
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeWhitelist1(address[])"(
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maxCount(overrides?: CallOverrides): Promise<BigNumber>;

  "maxCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setMaxCount(
    _maxCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxCount(uint256)"(
    _maxCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  limit(overrides?: CallOverrides): Promise<BigNumber>;

  "limit()"(overrides?: CallOverrides): Promise<BigNumber>;

  step(overrides?: CallOverrides): Promise<BigNumber>;

  "step()"(overrides?: CallOverrides): Promise<BigNumber>;

  addWhitelist2(
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addWhitelist2(address[])"(
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addWhitelist1(
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addWhitelist1(address[])"(
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeTo(_feeTo: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setFeeTo(address)"(
    _feeTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMintPrice(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMintPrice(uint256)"(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStep(
    _step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStep(uint256)"(
    _step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whitelist1(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whitelist1(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    feeTo(overrides?: CallOverrides): Promise<string>;

    "feeTo()"(overrides?: CallOverrides): Promise<string>;

    removeWhitelist2(addrs: string[], overrides?: CallOverrides): Promise<void>;

    "removeWhitelist2(address[])"(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLimit(_limit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setLimit(uint256)"(
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist2(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "whitelist2(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nft(overrides?: CallOverrides): Promise<string>;

    "nft()"(overrides?: CallOverrides): Promise<string>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "mintPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    removeWhitelist1(addrs: string[], overrides?: CallOverrides): Promise<void>;

    "removeWhitelist1(address[])"(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    maxCount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "mint(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCount(
      _maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxCount(uint256)"(
      _maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    limit(overrides?: CallOverrides): Promise<BigNumber>;

    "limit()"(overrides?: CallOverrides): Promise<BigNumber>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    "step()"(overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelist2(addrs: string[], overrides?: CallOverrides): Promise<void>;

    "addWhitelist2(address[])"(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelist1(addrs: string[], overrides?: CallOverrides): Promise<void>;

    "addWhitelist1(address[])"(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintPrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStep(_step: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist1(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "whitelist1(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTo()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelist2(
      addrs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeWhitelist2(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLimit(_limit: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setLimit(uint256)"(
      _limit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    whitelist2(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "whitelist2(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    "nft()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "mintPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelist1(
      addrs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeWhitelist1(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    maxCount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(count: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;

    "mint(uint256)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setMaxCount(
      _maxCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxCount(uint256)"(
      _maxCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    limit(overrides?: CallOverrides): Promise<BigNumber>;

    "limit()"(overrides?: CallOverrides): Promise<BigNumber>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    "step()"(overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelist2(addrs: string[], overrides?: Overrides): Promise<BigNumber>;

    "addWhitelist2(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    addWhitelist1(addrs: string[], overrides?: Overrides): Promise<BigNumber>;

    "addWhitelist1(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeTo(_feeTo: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMintPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMintPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStep(_step: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    whitelist1(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "whitelist1(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeTo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelist2(
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeWhitelist2(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLimit(
      _limit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLimit(uint256)"(
      _limit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whitelist2(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelist2(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nft()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelist1(
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeWhitelist1(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maxCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setMaxCount(
      _maxCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxCount(uint256)"(
      _maxCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    limit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "limit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    step(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "step()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addWhitelist2(
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addWhitelist2(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addWhitelist1(
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addWhitelist1(address[])"(
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMintPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMintPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whitelist1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelist1(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
